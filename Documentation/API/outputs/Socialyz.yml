openapi: 3.0.0
info:
  version: '1.0'
  title: Socialyz
servers:
  - url: http://socialyz.com
paths:
  /users:
    get:
      summary: Returns list of users based on limit and offset
      operationId: listUser
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          name: type
          required: true
          description: Type of user to be retrived.
          schema:
            type: string
            enum:
              - all
              - following
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
              example:
                - id: 10
                  name: Test Tester
                  username: testtester
                  email: test@tester.com
                  img: profile.jpg
                  color: '#fff000'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      summary: Returns details about a particular user
      operationId: getUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Details about a user by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Tester:
                  value:
                    id: 10
                    name: Test Tester
                    username: testtester
                    email: test@tester.com
                    img: profile.jpg
                    color: '#fff000'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: update detail about a single user
      operationId: updateUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: User to add to system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated user detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Tester:
                  value:
                    id: 10
                    name: Test Tester
                    username: testtester
                    email: test@tester.com
                    img: profile.jpg
                    color: '#fff000'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a single user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: User successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              example:
                code: 200
                message: user successfully deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts:
    post:
      summary: Create a new post
      operationId: createPost
      requestBody:
        description: Add Post to system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post Successfully Added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              example:
                code: 201
                message: post successfully created
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Returns list of posts based on limit and offset
      operationId: listPost
      tags:
        - post
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          name: type
          required: true
          description: type of posts to be retrieved.
          schema:
            type: string
            enum:
              - all
              - following
              - user
      responses:
        '200':
          description: List of post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPosts'
              example:
                - id: 13
                  type: Image
                  owner:
                    id: 10
                    name: Test Tester
                    username: testtester
                    image: profile.jpg
                    color: '#fff000'
                  created_at: '2021-08-14T21:03:30.000000Z'
                  content: I am a example description
                  like_count: 9
                  comment_count: 12
                  images:
                    - id: 1
                      type: original
                      file: original.jpg
                    - id: 1
                      type: alpha
                      file: alpha.jpg
                  video: video.mp4
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}:
    get:
      summary: Returns post detail
      operationId: getPost
      tags:
        - post
      parameters:
        - name: id
          in: path
          description: ID
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Details about a post by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPost'
              example:
                summary: Example of post
                value:
                  id: 13
                  owner:
                    id: 10
                    name: Test Tester
                    username: testtester
                    image: profile.jpg
                    color: '#fff000'
                  created_at: '2021-08-14T21:03:30.000000Z'
                  content: Lorem ipsum ...
                  like_count: 9
                  comment_count: 12
                  images:
                    - id: 1
                      type: original
                      file: original.jpg
                    - id: 1
                      type: alpha
                      file: alpha.jpg
                  video: video.mp4
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a single post
      operationId: deletePost
      parameters:
        - name: id
          in: path
          description: ID of the post
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Post successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              example:
                code: 200
                message: post successfully deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /comments:
    post:
      summary: Create a comment and attach to post
      operationId: createComment
      requestBody:
        description: Add Post to system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment Successfuly added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              example:
                code: 201
                message: comment Successfuly Added
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: get comments of a post
      operationId: getComment
      parameters:
        - in: query
          name: post_id
          required: true
          description: Type of user to be retrived.
          schema:
            type: integer
      responses:
        '200':
          description: List comment for a post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetComments'
              example:
                - id: 23
                  post: 32
                  owner: 10
                  body: example comment 1
                  created_at: '2021-08-14T21:03:30.000000Z'
                - id: 24
                  post: 32
                  owner: 21
                  body: example comment 2
                  created_at: '2021-08-14T21:03:30.000000Z'
                - id: 25
                  post: 32
                  owner: 14
                  body: example comment 3
                  created_at: '2021-08-14T21:03:30.000000Z'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /comments/{id}:
    delete:
      summary: Delete a single comment
      operationId: deleteComment
      parameters:
        - name: id
          in: path
          description: ID of the comment
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Comment Successfuly deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              example:
                code: 200
                message: comment Successfuly Deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a comment
      operationId: updateComment
      parameters:
        - name: id
          in: path
          description: ID of the comment
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: Add Post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment after being updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              example:
                id: 23
                post: 32
                owner: 10
                body: updated comment
                created_at: '2021-08-14T21:03:30.000000Z'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /likes:
    post:
      summary: Like a post
      operationId: like
      requestBody:
        description: Add Like to post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
      responses:
        '201':
          description: Post liked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              example:
                code: 201
                message: Post successfully liked
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: get likes of a post
      operationId: getLike
      parameters:
        - in: query
          name: post_id
          required: true
          description: id of post whose likes need to be retrieved
          schema:
            type: integer
      responses:
        '200':
          description: List user that likes post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLikes'
              example:
                - id: 10
                  post: 25
                  owner:
                    id: 10
                    name: Test Tester
                    username: testtester
                    image: profile.jpg
                    color: '#fff000'
                  created_at: '2021-08-14T21:03:30.000000Z'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Unlike a post
      operationId: unlike
      parameters:
        - name: post_id
          in: query
          description: ID of post
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: user_id
          in: query
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Post successfully unliked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              example:
                code: 200
                message: Post successfully unliked
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /relations:
    post:
      summary: Create new relation between two users
      operationId: createRelations
      requestBody:
        description: Information about users and type of relation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRelation'
      responses:
        '201':
          description: Relation successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              example:
                code: 201
                message: Relation successfully created
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: get all relations of a user
      operationId: getRelations
      parameters:
        - in: query
          name: user_id
          required: true
          description: id of users whose relations is to be listed
          schema:
            type: integer
      responses:
        '200':
          description: List user that are related to current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserRelations'
              example:
                - id: 10
                  owner: 25
                  user:
                    id: 10
                    name: Test Tester
                    username: testtester
                    image: profile.jpg
                    color: '#fff000'
                  created_at: '2021-08-14T21:03:30.000000Z'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove relation between users
      operationId: unfollow
      parameters:
        - name: owner_id
          in: query
          description: ID of user who is owner of relation ("Followed by")
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: user_id
          in: query
          description: ID of user whom the owner is related to ("Followed to")
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Relation successfully removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              example:
                code: 200
                message: 'Relation successfully removed '
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    User:
      type: object
      required:
        - name
        - username
        - email
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        img:
          type: string
        color:
          type: string
      example:
        id: 21
        name: Test Tester
        username: testtester
        email: test@tester.com
        img: profile.jpg
        color: '#fff000'
    UserRelation:
      type: object
      required:
        - owner
        - user
        - type
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        owner:
          type: integer
        user:
          type: integer
      example:
        id: 11
        owner: 10
        user: 12
    GetUserRelations:
      type: array
      items:
        $ref: '#/components/schemas/GetUserRelation'
    GetUserRelation:
      type: object
      required:
        - id
        - owner
        - user
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        owner:
          type: integer
        user:
          $ref: '#/components/schemas/User'
      example:
        id: 11
        owner: 10
        user:
          id: 12
          name: Test Tester
          username: testtester
          img: profile.jpg
          color: '#fff000'
        accepted: true
    Post:
      type: object
      required:
        - owner
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        type:
          type: string
          example: image
        owner:
          type: integer
          format: int64
          minimum: 1
        created_at:
          type: string
          format: date-time
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        video:
          type: string
      example:
        id: 10
        type: image
        owner: 10
        created_at: '2021-08-14T21:03:30.000000Z'
        images:
          - id: 1
            type: original
            file: original.jpg
          - id: 1
            type: alpha
            file: alpha.jpg
        video: video.mp4
    GetPosts:
      type: array
      items:
        $ref: '#/components/schemas/GetPost'
    GetPost:
      type: object
      required:
        - id
        - owner
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        owner:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
        like_count:
          type: integer
          format: int64
          minimum: 1
        comment_count:
          type: integer
          format: int64
          minimum: 1
        content:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        video:
          type: string
      example:
        id: 10
        type: Image
        owner:
          id: 10
          name: Test Tester
          username: testtester
          image: profile.jpg
          color: '#fff000'
        created_at: '2021-08-14T21:03:30.000000Z'
        like_count: 9
        comment_count: 12
        content: example content
        images:
          - id: 1
            type: original
            file: original.jpg
          - id: 1
            type: alpha
            file: alpha.jpg
        video: video.mp4
    GetComments:
      type: array
      items:
        $ref: '#/components/schemas/GetComment'
    GetComment:
      type: object
      required:
        - id
        - post
        - owner
        - body
      properties:
        id:
          type: integer
          format: int64
        post:
          type: integer
        owner:
          $ref: '#/components/schemas/User'
        body:
          type: string
        created_at:
          type: string
          format: date-time
      example:
        id: 23
        post: 32
        owner:
          id: 10
          name: Test Tester
          username: testtester
          image: profile.jpg
          color: '#fff000'
        body: i like this post
        created_at: '2021-08-14T21:03:30.000000Z'
    Comment:
      type: object
      required:
        - post
        - owner
        - body
      properties:
        id:
          type: integer
          format: int64
        post:
          type: integer
        owner:
          type: integer
        body:
          type: string
        created_at:
          type: string
          format: date-time
      example:
        id: 23
        post: 32
        owner: 10
        body: i like this post
        created_at: '2021-08-14T21:03:30.000000Z'
    GetLikes:
      type: array
      items:
        $ref: '#/components/schemas/GetLike'
    GetLike:
      type: object
      required:
        - id
        - post
        - owner
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        post:
          type: integer
        owner:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
      example:
        id: 10
        post: 25
        owner:
          id: 10
          name: Test Tester
          username: testtester
          image: profile.jpg
          color: '#fff000'
        created_at: '2021-08-14T21:03:30.000000Z'
    Like:
      type: object
      required:
        - post
        - owner
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        post:
          type: integer
        owner:
          type: integer
        created_at:
          type: string
          format: date-time
      example:
        id: 10
        post: 25
        owner: 10
        created_at: '2021-08-14T21:03:30.000000Z'
    Image:
      type: object
      required:
        - id
        - type
        - file
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        type:
          type: string
        file:
          type: string
    Success:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          minimum: 200
          maximum: 201
        message:
          type: string
          example: Post has been successfully added
      example:
        code: 200
        message: Object have been successfully added
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          minimum: 400
          maximum: 511
        message:
          type: string
      example:
        code: 500
        message: something went wrong!
  parameters:
    offsetParam:
      name: offset
      in: query
      description: ''
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    limitParam:
      name: limit
      in: query
      description: ''
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
